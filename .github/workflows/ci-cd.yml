# my-backend/.github/workflows/ci-cd.yml
name: Build, Test & Deploy (AWS)

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  AWS_REGION: us-east-1 # <<<--- CUSTOMIZE: Your AWS region (e.g., ap-south-1)
  ECR_REPOSITORY_FRONTEND: my-app-frontend # <<<--- CUSTOMIZE: Name of your ECR repo for frontend
  ECR_REPOSITORY_BACKEND: my-app-backend   # <<<--- CUSTOMIZE: Name of your ECR repo for backend
  # <<<--- CUSTOMIZE: Update with your GitHub username/organization and repository names
  REPO_FRONTEND: PunsaraniJayawardhana/frontend # Use the actual repo name for my-app
  REPO_AUTOMATION: PunsaraniJayawardhana/testing # Use the actual repo name for automation

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Backend Repository
        uses: actions/checkout@v4
        with:
          path: my-backend # Checks out THIS repo (my-backend) into a folder named 'my-backend'

      - name: Checkout Frontend Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REPO_FRONTEND }}
          path: my-app # Check out frontend repo into 'my-app' folder
          token: ${{ secrets.GH_PAT }}

      - name: Checkout Automation Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REPO_AUTOMATION }}
          path: automation # Checks out automation repo into 'automation' folder
          token: ${{ secrets.GH_PAT }}

      # --- START OF NEW DEBUGGING STEPS ---
      - name: Debug - List Workspace Structure
        run: |
          echo "--- Current Working Directory: $(pwd) ---"
          echo "--- Listing contents of the entire workspace: ---"
          ls -F
          echo ""
          echo "--- Listing contents of 'my-backend' directory: ---"
          ls -F my-backend/
          echo ""
          echo "--- Listing contents of 'my-app' directory: ---"
          ls -F my-app/
          echo ""
          echo "--- Listing contents of 'automation' directory: ---"
          ls -F automation/
          echo ""
          echo "--- Verifying content of automation/Dockerfile: ---"
          cat automation/Dockerfile || echo "automation/Dockerfile not found or accessible."
          echo ""
          echo "--- Verifying content of my-backend/docker-compose.yml: ---"
          cat my-backend/docker-compose.yml
      # --- END OF NEW DEBUGGING STEPS ---

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Build Docker Images (with docker-compose)
        run: docker-compose -f my-backend/docker-compose.yml build

      - name: Start Services for Testing
        run: docker-compose -f my-backend/docker-compose.yml up -d --wait-for-service-healthy backend frontend

      - name: Debug - List files in Cypress container
        run: docker-compose -f my-backend/docker-compose.yml run --rm cypress ls -R /e2e

      
      - name: Run Cypress Tests
        run: docker-compose -f my-backend/docker-compose.yml run --rm --entrypoint "" cypress ls -R /e2e
        env:
         CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }} # Though already set in docker-compose.yml for the service
        # ----------------------------

      - name: Stop Services
        if: always()
        run: docker-compose -f my-backend/docker-compose.yml down

# ... (rest of your ci-cd.yml) ...

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout Backend Repository
        uses: actions/checkout@v4
        with:
          path: my-backend

      - name: Checkout Frontend Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REPO_FRONTEND }}
          path: my-app
          token: ${{ secrets.GH_PAT }}

      # Remaining steps for AWS credentials, ECR login, building, and pushing images
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Tag Frontend Image for ECR
        run: |
          docker build -t ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_FRONTEND }}:${{ github.sha }} ./my-app
          docker build -t ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_FRONTEND }}:latest ./my-app

      - name: Build and Tag Backend Image for ECR
        run: |
          docker build -t ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_BACKEND }}:${{ github.sha }} ./my-backend
          docker build -t ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_BACKEND }}:latest ./my-backend

      - name: Push Frontend Image to ECR
        run: docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_FRONTEND }}:${{ github.sha }}

      - name: Push Backend Image to ECR
        run: docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_BACKEND }}:${{ github.sha }}

      - name: Deploy to AWS (Your Specific Implementation)
        run: |
          echo "Deployment initiated for Frontend and Backend images tagged with ${{ github.sha }}"
          # <<<--- CUSTOMIZE: REPLACE THIS SECTION with your actual AWS deployment commands.
          echo "Remember to replace this placeholder with actual AWS deployment commands!"